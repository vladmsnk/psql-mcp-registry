// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "psql-mcp-registry/internal/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateInstance provides a mock function with given fields: ctx, instance
func (_m *Storage) CreateInstance(ctx context.Context, instance *model.Instance) error {
	ret := _m.Called(ctx, instance)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Instance) error); ok {
		r0 = rf(ctx, instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInstanceByName provides a mock function with given fields: ctx, name
func (_m *Storage) GetInstanceByName(ctx context.Context, name string) (*model.Instance, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceByName")
	}

	var r0 *model.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Instance, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Instance); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: ctx
func (_m *Storage) ListInstances(ctx context.Context) ([]model.Instance, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 []model.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Instance, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Instance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
