// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	pg "psql-mcp-registry/internal/pg"

	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetActiveQueries provides a mock function with given fields: ctx, dbName, minDuration
func (_m *ClientInterface) GetActiveQueries(ctx context.Context, dbName string, minDuration int) ([]pg.ActiveQuery, error) {
	ret := _m.Called(ctx, dbName, minDuration)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveQueries")
	}

	var r0 []pg.ActiveQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]pg.ActiveQuery, error)); ok {
		return rf(ctx, dbName, minDuration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []pg.ActiveQuery); ok {
		r0 = rf(ctx, dbName, minDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.ActiveQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, dbName, minDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheHitRateDB provides a mock function with given fields: ctx, dbName
func (_m *ClientInterface) GetCacheHitRateDB(ctx context.Context, dbName string) (*pg.CacheHitRate, error) {
	ret := _m.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheHitRateDB")
	}

	var r0 *pg.CacheHitRate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pg.CacheHitRate, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pg.CacheHitRate); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.CacheHitRate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheHitRateGlobal provides a mock function with given fields: ctx
func (_m *ClientInterface) GetCacheHitRateGlobal(ctx context.Context) (*pg.CacheHitRate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheHitRateGlobal")
	}

	var r0 *pg.CacheHitRate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pg.CacheHitRate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pg.CacheHitRate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.CacheHitRate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangedSettings provides a mock function with given fields: ctx
func (_m *ClientInterface) GetChangedSettings(ctx context.Context) ([]pg.SettingInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetChangedSettings")
	}

	var r0 []pg.SettingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pg.SettingInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pg.SettingInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.SettingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckpointsStats provides a mock function with given fields: ctx
func (_m *ClientInterface) GetCheckpointsStats(ctx context.Context) (*pg.CheckpointsStats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckpointsStats")
	}

	var r0 *pg.CheckpointsStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pg.CheckpointsStats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pg.CheckpointsStats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.CheckpointsStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionStats provides a mock function with given fields: ctx
func (_m *ClientInterface) GetConnectionStats(ctx context.Context) (*pg.ConnectionSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionStats")
	}

	var r0 *pg.ConnectionSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pg.ConnectionSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pg.ConnectionSummary); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.ConnectionSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseOverview provides a mock function with given fields: ctx, dbName
func (_m *ClientInterface) GetDatabaseOverview(ctx context.Context, dbName string) (*pg.DatabaseOverview, error) {
	ret := _m.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseOverview")
	}

	var r0 *pg.DatabaseOverview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pg.DatabaseOverview, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pg.DatabaseOverview); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.DatabaseOverview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseSizes provides a mock function with given fields: ctx
func (_m *ClientInterface) GetDatabaseSizes(ctx context.Context) ([]pg.DatabaseSize, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseSizes")
	}

	var r0 []pg.DatabaseSize
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pg.DatabaseSize, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pg.DatabaseSize); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.DatabaseSize)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndexStats provides a mock function with given fields: ctx, limit
func (_m *ClientInterface) GetIndexStats(ctx context.Context, limit int) ([]pg.IndexStats, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexStats")
	}

	var r0 []pg.IndexStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]pg.IndexStats, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []pg.IndexStats); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.IndexStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLockingInfo provides a mock function with given fields: ctx, dbName
func (_m *ClientInterface) GetLockingInfo(ctx context.Context, dbName string) ([]pg.LockInfo, error) {
	ret := _m.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for GetLockingInfo")
	}

	var r0 []pg.LockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]pg.LockInfo, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []pg.LockInfo); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.LockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlowQueries provides a mock function with given fields: ctx, limit
func (_m *ClientInterface) GetSlowQueries(ctx context.Context, limit int) ([]pg.SlowQuery, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetSlowQueries")
	}

	var r0 []pg.SlowQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]pg.SlowQuery, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []pg.SlowQuery); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.SlowQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTablesInfo provides a mock function with given fields: ctx, limit
func (_m *ClientInterface) GetTablesInfo(ctx context.Context, limit int) ([]pg.TableInfo, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTablesInfo")
	}

	var r0 []pg.TableInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]pg.TableInfo, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []pg.TableInfo); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pg.TableInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalActivity provides a mock function with given fields: ctx
func (_m *ClientInterface) GetWalActivity(ctx context.Context) (*pg.WalActivity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWalActivity")
	}

	var r0 *pg.WalActivity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*pg.WalActivity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *pg.WalActivity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.WalActivity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with no fields
func (_m *ClientInterface) Version() *pg.Version {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *pg.Version
	if rf, ok := ret.Get(0).(func() *pg.Version); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Version)
		}
	}

	return r0
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
