// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	pg "psql-mcp-registry/internal/pg"

	mock "github.com/stretchr/testify/mock"
)

// ConfigLoader is an autogenerated mock type for the ConfigLoader type
type ConfigLoader struct {
	mock.Mock
}

// Load provides a mock function with given fields: instanceName
func (_m *ConfigLoader) Load(instanceName string) (*pg.Config, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *pg.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pg.Config, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) *pg.Config); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pg.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConfigLoader creates a new instance of ConfigLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigLoader {
	mock := &ConfigLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
